{"version":3,"sources":["Countdown/Component.js","BeerBackground/BeerBackground.js","Share/WhatsappButton.js","Share/TelegramButton.js","Share/Share.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","state","days","hours","minutes","seconds","finished","S","M","_this","H","D","componentWillMount","timer","setInterval","updateCounter","padZero","n","padStart","_assertThisInitialize","Object","assertThisInitialized","target","props","now","Date","getTime","targetTime","dist","setState","Math","floor","_this$state","this","children","React","Component","styled","div","_templateObject","_ref","className","text","url","react_default","a","createElement","href","concat","index_es","icon","faWhatsapp","WhatsappButton_templateObject","faTelegram","TelegramButton_templateObject","window","location","msg","react","WhatsappButton","TelegramButton","Share_templateObject","Rest","App_templateObject","Days","_templateObject2","Time","_templateObject3","To","_templateObject4","ShareWrapper","_templateObject5","App","BeerBackground","Fragment","src_Share_Share","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f497ba2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Countdown extends React.Component {\n  state = {\n    days: '0',\n    hours: '00',\n    minutes: '00',\n    seconds: '00',\n    finished: false\n  }\n\n  S = 1000\n  M = this.S * 60\n  H = this.M * 60\n  D = this.H * 24\n\n  componentWillMount = () => {\n    this.timer = setInterval(this.updateCounter, 1000)\n  }\n\n  padZero = n => (n + '').padStart(2, '0')\n\n  updateCounter = () => {\n    const { S, M, H, D } = this\n    const { target } = this.props\n\n    const now = new Date().getTime()\n    const targetTime = target.getTime()\n    const dist = targetTime - now\n\n    this.setState({\n      days:    Math.floor(dist / D) + '',\n      hours:   this.padZero( Math.floor((dist % D) / H) ),\n      minutes: this.padZero( Math.floor((dist % H) / M) ),\n      seconds: this.padZero( Math.floor((dist % M) / S) ),\n      finished: targetTime < now\n    })\n  }\n\n  render () {\n    const { days, hours, minutes, seconds, finished } = this.state\n    const { children } = this.props\n    return children({days, hours, minutes, seconds, finished})\n  }\n}\n\nCountdown.propTypes = {\n  until: PropTypes.instanceOf(Date)\n}\n\nexport default Countdown\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background: #f5b53e;\n  height: 100%;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons'\n\nconst Button = ({ className, text, url }) => {\n  return (\n    <a className={className} href={`whatsapp://send?text=${text}`}>\n      <FontAwesomeIcon icon={faWhatsapp} />\n    </a>\n  )\n}\n\nexport default styled(Button)`\n  color: #009688;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTelegram } from '@fortawesome/free-brands-svg-icons'\n\nconst Button = ({ className, text, url }) => {\n  return (\n    <a className={className} href={`tg://msg?text=${text}`}>\n      <FontAwesomeIcon icon={faTelegram} />\n    </a>\n  )\n}\n\nexport default styled(Button)`\n  color: #5682a3;\n`\n","import React, { Fragment } from 'react'\nimport styled from 'styled-components'\nimport WhatsappButton from './WhatsappButton'\nimport TelegramButton from './TelegramButton'\n\nconst Share = ({ className }) => {\n  const url = window.location.href\n  const msg = `Calma, 2020 já está chegando... ${url}`\n\n  return (\n    <Fragment>\n      <WhatsappButton className={className} url={url} text={msg} />\n      <TelegramButton className={className} url={url} text={msg} />\n    </Fragment>\n  )\n}\n\nexport default styled(Share)`\n  background-color: #fff;\n  border-radius: 50%;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  padding: 5px;\n  text-align: center;\n  font-size: 30px;\n  margin: 5px;\n\n`\n","import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport Countdown from './Countdown'\nimport BeerBackground from './BeerBackground'\nimport Share from './Share'\n\nconst Rest = styled.div`\n  padding: 20vh 0 5vh;\n  font-size: 30px;\n  text-align: center;\n`\n\nconst Days = styled.div`\n  font-size: 26px;\n  text-align: center;\n`\n\nconst Time = styled.div`\n  font-size: 26px;\n  text-align: center;\n`\n\nconst To = styled.div`\n  padding: 5vh 0 5vh;\n  font-size: 26px;\n  text-align: center;\n`\n\nconst ShareWrapper = styled.div`\n  padding: 5vh 0 5vh;\n  text-align: center;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <BeerBackground>\n        <Countdown target={new Date('Apr 20, 2020 00:00:00')}>\n          {({days, hours, minutes, seconds, finished}) => finished ? (\n            <Rest>Hora de mijar em tudo</Rest>\n          ) : (\n            <>\n              <Rest>Faltam:</Rest>\n              <Days> {days} dias </Days>\n              <Time> {`${hours}:${minutes}:${seconds}`} </Time>\n            </>\n          )}\n        </Countdown>\n        <To> Para a Oferenda ser despachada </To>\n        <ShareWrapper>\n          <Share />\n        </ShareWrapper>\n      </BeerBackground>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}